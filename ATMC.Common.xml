<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ATMC.Common</name>
    </assembly>
    <members>
        <member name="T:ATMC.Common.FormMakeModel">
            <summary>
            Form for creating and managing 3D models from scan data with robot poses.
            Handles scanning operations and model saving capabilities.
            </summary>
            <example>
            Using FormMakeModel with a WorkCell:
            <code>
            var scanGroups = new ScanActionGroup[] { /* scan groups here */ };
            using (var form = new FormMakeModel(workCell, scanGroups))
            {
                form.ShowDialog();
            }
            </code>
            </example>
        </member>
        <member name="F:ATMC.Common.FormMakeModel._clouds">
            <summary>
            Dictionary to store pointcloud data with scan action names as keys.
            </summary>
        </member>
        <member name="F:ATMC.Common.FormMakeModel._poses">
            <summary>
            Dictionary to store robot pose data with pose names as keys.
            </summary>
        </member>
        <member name="F:ATMC.Common.FormMakeModel._combinedGroups">
            <summary>
            List of group to be combined.
            </summary>
        </member>
        <member name="E:ATMC.Common.FormMakeModel.OnDataClear">
            <summary>
            Event triggered when data is cleared from the form.
            </summary>
        </member>
        <member name="M:ATMC.Common.FormMakeModel.#ctor(LotusAPI.Controls.SceneViewer,ATMC.Common.WorkCell.WorkCell,ATMC.Common.ScanActionGroup[],System.Collections.Generic.List{ATMC.Common.RobotPoseDef},System.Single)">
            <summary>
            Initializes a new instance of the FormMakeModel using a WorkCell instance.
            </summary>
            <param name="wc">The WorkCell containing the necessary components.</param>
            <param name="scan_action_groups">Groups of scan actions to be performed.</param>
            <param name="install_robot_poses">Optional list of robot poses for installation.</param>
            <example>
            <code>
            var workCell = new WorkCell.WorkCell();
            var scanGroups = new ScanActionGroup[] { /* scan actions */ };
            var form = new FormMakeModel(workCell, scanGroups);
            form.Show();
            </code>
            </example>
        </member>
        <member name="M:ATMC.Common.FormMakeModel.#ctor(LotusAPI.Controls.SceneViewer,LotusAPI.Robotics.Graph.WorkCellGraph,System.Collections.Generic.Dictionary{System.String,ATMC.Common.WorkCell.ScannerClient},System.Collections.Generic.Dictionary{System.String,ATMC.Common.WorkCell.RobotClient},ATMC.Common.ScanActionGroup[],System.Collections.Generic.List{ATMC.Common.RobotPoseDef},System.Single)">
            <summary>
            Initializes a new instance of the FormMakeModel with detailed components.
            </summary>
            <param name="wc">The WorkCellGraph containing the work cell graph.</param>
            <param name="scanners">Dictionary of scanner clients by name.</param>
            <param name="robots">Dictionary of robot clients by name.</param>
            <param name="scan_action_groups">Groups of scan actions to be performed.</param>
            <param name="install_robot_poses">Optional list of robot poses for installation.</param>
            <example>
            <code>
            var graph = new WorkCellGraph();
            var scanners = new Dictionary&lt;string, ScannerClient&gt;();
            var robots = new Dictionary&lt;string, RobotClient&gt;();
            var scanGroups = new ScanActionGroup[] { /* scan actions */ };
            var form = new FormMakeModel(graph, scanners, robots, scanGroups);
            form.ShowDialog();
            </code>
            </example>
        </member>
        <member name="M:ATMC.Common.FormMakeModel.#ctor(LotusAPI.Controls.SceneViewer,LotusAPI.Robotics.Graph.WorkCellGraph,LotusAPI.HW.AbeoScanManager,ATMC.Common.RobotManager,ATMC.Common.ScanActionGroup[])">
            <summary>
            Initializes a new instance of the FormMakeModel using manager objects.
            </summary>
            <param name="wc">The WorkCellGraph containing the work cell graph.</param>
            <param name="scanner_manager">Manager for scanner devices.</param>
            <param name="robot_manager">Manager for robot devices.</param>
            <param name="scan_action_groups">Groups of scan actions to be performed.</param>
            <example>
            <code>
            var graph = new WorkCellGraph();
            var scannerManager = new AbeoScanManager();
            var robotManager = new RobotManager();
            var scanGroups = new ScanActionGroup[] { /* scan actions */ };
            var form = new FormMakeModel(graph, scannerManager, robotManager, scanGroups);
            form.Show();
            </code>
            </example>
        </member>
        <member name="M:ATMC.Common.FormMakeModel.#ctor(LotusAPI.Controls.SceneViewer,LotusAPI.Robotics.Graph.WorkCellGraph,System.Collections.Generic.Dictionary{System.String,LotusAPI.MV.AbeoScan},System.Collections.Generic.Dictionary{System.String,LotusAPI.Robotics.IRobotController},ATMC.Common.ScanActionGroup[],System.Single)">
            <summary>
            Initializes a new instance of the FormMakeModel using dictionaries of generic scanner and robot interfaces.
            </summary>
            <param name="wc">The WorkCellGraph containing the work cell graph.</param>
            <param name="scanners">Dictionary of scanner devices by name.</param>
            <param name="robots">Dictionary of robot controllers by name.</param>
            <param name="scan_action_groups">Groups of scan actions to be performed.</param>
            <example>
            <code>
            var graph = new WorkCellGraph();
            var scanners = new Dictionary&lt;string, AbeoScan&gt;();
            var robots = new Dictionary&lt;string, IRobotController&gt;();
            var scanGroups = new ScanActionGroup[] { /* scan actions */ };
            var form = new FormMakeModel(graph, scanners, robots, scanGroups);
            form.ShowDialog();
            </code>
            </example>
        </member>
        <member name="M:ATMC.Common.FormMakeModel.bt_SAVE_Click(System.Object,System.EventArgs)">
            <summary>
            Handles the save button click event. Saves pointclouds and robot poses to a selected directory.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">Event arguments.</param>
            <example>
            This method is typically called when the user clicks the save button:
            <code>
            private void SetupButtons()
            {
                saveButton.Click += bt_SAVE_Click;
            }
            </code>
            </example>
        </member>
        <member name="M:ATMC.Common.FormMakeModel.lbScanItems_SelectedIndexChanged(System.Object,System.EventArgs)">
            <summary>
            Handles the selected index change event for scan items list.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:ATMC.Common.FormMakeModel.btClear_Click(System.Object,System.EventArgs)">
            <summary>
            Handles the clear button click event. Clears all collected data.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">Event arguments.</param>
            <example>
            This method is typically called when the user clicks the clear button:
            <code>
            private void SetupButtons()
            {
                clearButton.Click += btClear_Click;
            }
            </code>
            </example>
        </member>
        <member name="F:ATMC.Common.FormMakeModel.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:ATMC.Common.FormMakeModel.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ATMC.Common.FormMakeModel.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:ATMC.Common.FormSetting.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:ATMC.Common.FormSetting.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ATMC.Common.FormSetting.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:ATMC.Common.RobotPoseDef">
            <summary>
            Defines a robot pose configuration with name and related properties.
            </summary>
            <example>
            <code>
            var pose = new RobotPoseDef(name:"p0", robotName:"R1", checkNullTool:true, nullToolTolerance:5.0);
            Console.WriteLine(pose.ToString());
            </code>
            </example>
        </member>
        <member name="P:ATMC.Common.RobotPoseDef.Name">
            <summary>
            Gets or sets the name of the pose.
            </summary>
        </member>
        <member name="P:ATMC.Common.RobotPoseDef.RobotName">
            <summary>
            Gets or sets the name of the robot.
            </summary>
        </member>
        <member name="P:ATMC.Common.RobotPoseDef.CheckNullTool">
            <summary>
            Gets or sets whether to check for null tool condition.
            </summary>
        </member>
        <member name="P:ATMC.Common.RobotPoseDef.NullToolTolerance">
            <summary>
            Gets or sets the tolerance value for null tool checking in millimeters.
            </summary>
        </member>
        <member name="M:ATMC.Common.RobotPoseDef.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ATMC.Common.RobotPoseDef"/> class.
            </summary>
        </member>
        <member name="M:ATMC.Common.RobotPoseDef.#ctor(System.String,System.String,System.Boolean,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:ATMC.Common.RobotPoseDef"/> class with specified parameters.
            </summary>
            <param name="name">The name of the pose.</param>
            <param name="robotName">The name of the robot.</param>
            <param name="checkNullTool">Whether to check for null tool condition.</param>
            <param name="nullToolTolerance">The tolerance value for null tool checking.</param>
        </member>
        <member name="M:ATMC.Common.RobotPoseDef.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ATMC.Common.RobotPoseDef"/> class from a string definition.
            </summary>
            <param name="def">String in format "name:robot_name".</param>
            <example>
            <code>
            var pose = new RobotPoseDef("scan_00:R1");
            </code>
            </example>
        </member>
        <member name="M:ATMC.Common.RobotPoseDef.ToString">
            <summary>
            Returns a string representation of the robot pose definition.
            </summary>
            <returns>A formatted string with pose details.</returns>
        </member>
        <member name="T:ATMC.Common.ScanDef">
            <summary>
            Defines a scanner configuration with scanner name, robot name and target frame.
            </summary>
            <example>
            <code>
            var scanDef = new ScanDef(scannerName:"S1", robotName:"R1", targetFrame:"WC");
            Console.WriteLine(scanDef.ToString());
            </code>
            </example>
        </member>
        <member name="P:ATMC.Common.ScanDef.ScannerName">
            <summary>
            Gets or sets the name of the scanner.
            </summary>
        </member>
        <member name="P:ATMC.Common.ScanDef.RobotName">
            <summary>
            Gets or sets the name of the robot.
            </summary>
        </member>
        <member name="P:ATMC.Common.ScanDef.TargetFrame">
            <summary>
            Gets or sets the target frame identifier.
            </summary>
        </member>
        <member name="M:ATMC.Common.ScanDef.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ATMC.Common.ScanDef"/> class.
            </summary>
        </member>
        <member name="M:ATMC.Common.ScanDef.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ATMC.Common.ScanDef"/> class with specified parameters.
            </summary>
            <param name="scannerName">The name of the scanner.</param>
            <param name="robotName">The name of the robot.</param>
            <param name="targetFrame">The target frame.</param>
        </member>
        <member name="M:ATMC.Common.ScanDef.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ATMC.Common.ScanDef"/> class from a string definition.
            </summary>
            <param name="def">String in format "ScannerName+RobotName->TargetFrame".</param>
            <example>
            <code>
            var scanDef = new ScanDef("S1+R1->WC");
            </code>
            </example>
        </member>
        <member name="M:ATMC.Common.ScanDef.ToString">
            <summary>
            Returns a string representation of the scan definition.
            </summary>
            <returns>A formatted string with scan definition details.</returns>
        </member>
        <member name="T:ATMC.Common.ScanAction">
            <summary>
            Represents a scanning action with associated scanner and robot pose definitions.
            </summary>
            <example>
            <code>
            var scanDef = new ScanDef(scannerName:"S1", robotName:"R1", targetFrame:"WC");
            var robotPose = new RobotPoseDef(name:"p0", robotName:"R1", checkNullTool:true, nullToolTolerance:10.0);
            var scanAction = new ScanAction(name:"body_scan0", "Scan body p0", scanDef, robotPose);
            </code>
            </example>
        </member>
        <member name="P:ATMC.Common.ScanAction.Name">
            <summary>
            Gets or sets the name of the action.
            </summary>
        </member>
        <member name="P:ATMC.Common.ScanAction.Text">
            <summary>
            Gets or sets the display text of the action.
            </summary>
        </member>
        <member name="P:ATMC.Common.ScanAction.ScanDef">
            <summary>
            Gets or sets the scan definition for this action.
            </summary>
        </member>
        <member name="P:ATMC.Common.ScanAction.RobotPoseDef">
            <summary>
            Gets or sets the robot pose definition for this action.
            </summary>
        </member>
        <member name="M:ATMC.Common.ScanAction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ATMC.Common.ScanAction"/> class.
            </summary>
        </member>
        <member name="M:ATMC.Common.ScanAction.#ctor(System.String,System.String,ATMC.Common.ScanDef,ATMC.Common.RobotPoseDef)">
            <summary>
            Initializes a new instance of the <see cref="T:ATMC.Common.ScanAction"/> class with specified parameters.
            </summary>
            <param name="name">The name of the action.</param>
            <param name="text">The display text of the action.</param>
            <param name="scanDef">The scan definition for this action.</param>
            <param name="robotPoseDef">The optional robot pose definition for this action.</param>
        </member>
        <member name="M:ATMC.Common.ScanAction.#ctor(System.String,ATMC.Common.ScanDef,ATMC.Common.RobotPoseDef)">
            <summary>
            Initializes a new instance of the <see cref="T:ATMC.Common.ScanAction"/> class with the name used as text.
            </summary>
            <param name="name">The name and display text of the action.</param>
            <param name="scanDef">The scan definition for this action.</param>
            <param name="robotPoseDef">The optional robot pose definition for this action.</param>
        </member>
        <member name="M:ATMC.Common.ScanAction.ToString">
            <summary>
            Returns a string representation of the scan action.
            </summary>
            <returns>The text if available, otherwise the name.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:ATMC.Common.ScanActionGroup" -->
        <member name="P:ATMC.Common.ScanActionGroup.Name">
            <summary>
            Gets or sets the name of the action group.
            </summary>
        </member>
        <member name="P:ATMC.Common.ScanActionGroup.Text">
            <summary>
            Gets or sets the display text of the action group.
            </summary>
        </member>
        <member name="P:ATMC.Common.ScanActionGroup.Combine">
            <summary>
            Gets or sets a value indicating whether to combine the actions in this group.
            </summary>
        </member>
        <member name="P:ATMC.Common.ScanActionGroup.ScanActions">
            <summary>
            Gets or sets the list of scan actions in this group.
            </summary>
        </member>
        <member name="M:ATMC.Common.ScanActionGroup.GetAction(System.String)">
            <summary>
            Gets a scan action by name from the group.
            </summary>
            <param name="action_name">The name of the action to find.</param>
            <returns>The scan action if found; otherwise, null.</returns>
            <example>
            <code>
            var action = actionGroup.GetAction("ScanPart1");
            if (action != null) {
                Console.WriteLine($"Found action: {action.Name}");
            }
            </code>
            </example>
        </member>
        <member name="M:ATMC.Common.ScanActionGroup.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ATMC.Common.ScanActionGroup"/> class.
            </summary>
        </member>
        <member name="M:ATMC.Common.ScanActionGroup.#ctor(System.String,System.String,System.Collections.Generic.List{ATMC.Common.ScanAction},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ATMC.Common.ScanActionGroup"/> class with specified parameters.
            </summary>
            <param name="name">The name of the action group.</param>
            <param name="text">The display text of the action group.</param>
            <param name="actions">The list of scan actions in this group.</param>
        </member>
        <member name="M:ATMC.Common.ScanActionGroup.#ctor(System.String,System.Collections.Generic.List{ATMC.Common.ScanAction},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ATMC.Common.ScanActionGroup"/> class with the name used as text.
            </summary>
            <param name="name">The name and display text of the action group.</param>
            <param name="actions">The list of scan actions in this group.</param>
        </member>
        <member name="M:ATMC.Common.ScanActionGroup.ToString">
            <summary>
            Returns a string representation of the scan action group.
            </summary>
            <returns>The text if available, otherwise the name.</returns>
        </member>
        <member name="F:ATMC.Common.BodyShop.FormMeasureConfig.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:ATMC.Common.BodyShop.FormMeasureConfig.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ATMC.Common.BodyShop.FormMeasureConfig.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:ATMC.Common.BodyShop.BodyModelConfig.ShiftLimit">
            <summary>
            Shift limit
            </summary>
        </member>
        <member name="M:ATMC.Common.CoarseToFineICPAligner.Align(LotusAPI.MV.Pointcloud,LotusAPI.Math.Matrix44d,System.Single)">
            <summary>
            Compute alignment
            </summary>
            <param name="scene">input scene</param>
            <param name="initial_matrix">initial model matrix</param>
            <param name="ovl_radius">overlap radius</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="F:ATMC.Common.CycleInfoView.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:ATMC.Common.CycleInfoView.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ATMC.Common.CycleInfoView.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:ATMC.Common.DBView.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:ATMC.Common.DBView.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ATMC.Common.DBView.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:ATMC.Common.ErrorIndicator">
            <summary>
            Linear Error indicator, assumps OK
            </summary>
        </member>
        <member name="F:ATMC.Common.ErrorIndicator.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:ATMC.Common.ErrorIndicator.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:ATMC.Common.GlassInstall.FormGapMesureConfigEditor.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:ATMC.Common.GlassInstall.FormGapMesureConfigEditor.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ATMC.Common.GlassInstall.FormGapMesureConfigEditor.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:ATMC.Common.GlassInstall.GapMeasureConfig.Valid">
            <summary>
            Return true if valid
            </summary>
        </member>
        <member name="F:ATMC.Common.LaserSealer.FormModelConfigurator.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:ATMC.Common.LaserSealer.FormModelConfigurator.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ATMC.Common.LaserSealer.FormModelConfigurator.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:ATMC.Common.LaserSealer.SealerModelConfigBase.InitSurfaceRef(System.Double)">
            <summary>
            Initialize surface inspection reference
            </summary>
            <param name="fps"></param>
        </member>
        <member name="M:ATMC.Common.LaserSealer.SealerModelConfigBase.Inspect(System.Double,LotusAPI.MV.Pointcloud,System.Int32)">
            <summary>
            Inspect pointcloud
            </summary>
            <param name="fps">FPS</param>
            <param name="pc">Input cloud</param>
            <param name="end_pos">End position</param>
            <returns>Inspection result</returns>
        </member>
        <member name="M:ATMC.Common.LaserSealer.SealerModelConfigBase.CalcHeightMap(System.Double,LotusAPI.MV.Pointcloud,LotusAPI.Math.Range2f)">
            <summary>
            Calc height map
            </summary>
            <param name="fps">FPS</param>
            <param name="pc">Input cloud</param>
            <param name="height_range">Height range</param>
        </member>
        <member name="M:ATMC.Common.LaserSealer.SealerModelConfigBase.InspectSurface(ATMC.Common.LaserSealer.InspectionResult)">
            <summary>
            Inspect surface
            </summary>
            <param name="res">Inpsection result</param>
            <returns>Surface OK Percentage</returns>
        </member>
        <member name="M:ATMC.Common.LaserSealer.SealerModelConfigBase.GetAlignOffset(System.Int32)">
            <summary>
            Get align offset
            </summary>
            <param name="align_pos">Align pos</param>
            <returns>Align offset</returns>
        </member>
        <member name="M:ATMC.Common.LaserSealer.SealerModelConfigBase.FindSpecs(System.Int32,System.Int32)">
            <summary>
            Find a spec list that match a row and align position
            </summary>
            <param name="row"></param>
            <param name="align_pos"></param>
            <returns></returns>
        </member>
        <member name="T:ATMC.Common.LaserSealer.ToolPositionTiming">
            <summary>
            Tool position and timing
            </summary>
        </member>
        <member name="T:ATMC.Common.LaserSealer.RobotPathInterval">
            <summary>
            Robot path interval
            </summary>
        </member>
        <member name="P:ATMC.Common.LaserSealer.RobotPathInterval.P0">
            <summary>
            Starting point
            </summary>
        </member>
        <member name="P:ATMC.Common.LaserSealer.RobotPathInterval.P1">
            <summary>
            Ending point
            </summary>
        </member>
        <member name="P:ATMC.Common.LaserSealer.RobotPathInterval.Fraction">
            <summary>
            Fraction from P0 to P1
            </summary>
        </member>
        <member name="P:ATMC.Common.LaserSealer.RobotPathInterval.Pos">
            <summary>
            Get the robot position in the interval
            </summary>
        </member>
        <member name="P:ATMC.Common.LaserSealer.RobotPathInterval.Valid">
            <summary>
            Valid if Direction vector is valid
            </summary>
        </member>
        <member name="M:ATMC.Common.LaserSealer.SealerSpec.CalcBaseLine(LotusAPI.Math.Point2f[],LotusAPI.Math.Point2f[])">
            <summary>
            Calculate base line
            </summary>
            <param name="left_pnts"></param>
            <param name="right_pnts"></param>
            <returns>Return null if not success</returns>
        </member>
        <member name="M:ATMC.Common.LaserSealer.Utils.GetRobotPathInterval(System.Collections.Generic.List{ATMC.Common.LaserSealer.ToolPositionTiming},System.Double)">
            <summary>
            Given a robot path as a sequence of timed tool positions, find a position that match with the given time 
            </summary>
            <param name="robot_path">Robot path</param>
            <param name="t_ms">time</param>
            <returns>The robot path interval, null if failed</returns>
        </member>
        <member name="M:ATMC.Common.LaserSealer.Utils.GetPathCloud(System.Collections.Generic.List{ATMC.Common.LaserSealer.ToolPositionTiming})">
            <summary>
            Get robot path pointcloud
            </summary>
            <param name="robot_path">Robot path</param>
            <returns>Robot path pointcloud</returns>
        </member>
        <member name="M:ATMC.Common.LaserSealer.Utils.GetSealerPathCloud(System.Double,LotusAPI.MV.Pointcloud,System.Collections.Generic.List{ATMC.Common.LaserSealer.ToolPositionTiming},System.Single[])">
            <summary>
            Get Sealer path pointcloud
            </summary>
            <param name="profile_cloud">Sealer profile cloud</param>
            <param name="robot_path">Robot path list</param>
            <param name="filtered_ok_chain">Filtered ok chain</param>
            <returns>Sealer ok cloud</returns>
        </member>
        <member name="M:ATMC.Common.LaserSealer.Utils.Inspect(System.Double,System.Int32,LotusAPI.MV.Pointcloud,ATMC.Common.LaserSealer.SealerModelConfigBase,System.Int32)">
            <summary>
            Sealer inspection
            </summary>
            <param name="fps">Sealer fps</param>
            <param name="end_pos">End position (-1 => inspect all)</param>
            <param name="pc">Sealer data  cloud</param>
            <param name="model">Model config</param>
            <param name="align_pos">Starting position</param>
            <returns>Inspection result</returns>
        </member>
        <member name="M:ATMC.Common.LaserSealer.Utils.CalcHeightMap(System.Double,LotusAPI.MV.Pointcloud,LotusAPI.Math.Range2f,ATMC.Common.LaserSealer.SealerModelConfigBase)">
            <summary>
            Calculate height map
            </summary>
            <param name="fps">Sealer fps</param>
            <param name="pc">Sealer data cloud</param>
            <param name="height_range">Height range</param>
            <param name="model">Model config</param>
        </member>
        <member name="M:ATMC.Common.LaserSealer.Utils.UpdateHeightMap(System.Collections.Generic.List{LotusAPI.HW.LaserProfiler.ProfileData},LotusAPI.MV.Pointcloud,LotusAPI.Math.Range2f)">
            <summary>
            Update data and height map partially
            </summary>
            <param name="dq">Laser profile data queue</param>
            <param name="pc">Pointcloud whose color channel will be updated</param>
            <param name="height_range">Height range</param>
        </member>
        <member name="M:ATMC.Common.LaserSealer.Utils.FindAlignPos(System.Double,LotusAPI.MV.Pointcloud,ATMC.Common.LaserSealer.SealerModelConfigBase,System.Boolean)">
            <summary>
            Find alignment position
            </summary>
            <param name="fps">Sealer FPS</param>
            <param name="pc">Sealer cloud</param>
            <param name="model">Model config</param>
            <returns>Starting position if found, -1 otherwise</returns>
        </member>
        <member name="M:ATMC.Common.ModelConfigBase.Match(System.Int32)">
            <summary>
            Return true if the given id is in the  ID list
            </summary>
            <param name="id">id number</param>
            <returns>True if the ID list contains the given id</returns>
        </member>
        <member name="P:ATMC.Common.ModelConfigBase.Name">
            <summary>
            Model name
            </summary>
        </member>
        <member name="P:ATMC.Common.ModelConfigBase.ModelDir">
            <summary>
            Model directory
            </summary>
        </member>
        <member name="M:ATMC.Common.ModelConfigBase.Init">
            <summary>
            Initialize the model
            </summary>
        </member>
        <member name="T:ATMC.Common.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:ATMC.Common.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:ATMC.Common.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:ATMC.Common.RegistrationConfig.CoarseAligner">
            <summary>
            Coarse aligner
            </summary>
        </member>
        <member name="P:ATMC.Common.RegistrationConfig.FineAligner">
            <summary>
            Fine aligner
            </summary>
        </member>
        <member name="P:ATMC.Common.RegistrationConfig.Finder">
            <summary>
            3D Pattern finder
            </summary>
        </member>
        <member name="P:ATMC.Common.RegistrationConfig.EnableFinder">
            <summary>
            Enable/disable 3D pattern finder
            </summary>
        </member>
        <member name="P:ATMC.Common.RegistrationConfig.ShiftOffset">
            <summary>
            Shift offset
            </summary>
        </member>
        <member name="P:ATMC.Common.RegistrationConfig.MaxFitness">
            <summary>
            Maximum fitness value
            </summary>
        </member>
        <member name="P:ATMC.Common.RegistrationConfig.MinOverlap">
            <summary>
            Minimum overlap ratio (0~1)
            </summary>
        </member>
        <member name="P:ATMC.Common.RegistrationConfig.OverlapRadius">
            <summary>
            Overlap radius (model->scene)
            </summary>
        </member>
        <member name="P:ATMC.Common.RegistrationConfig.ShiftLimit">
            <summary>
            Shift limit
            </summary>
        </member>
        <member name="P:ATMC.Common.RegistrationConfig.ScanPoses">
            <summary>
            Scan poses
            </summary>
        </member>
        <member name="P:ATMC.Common.RegistrationConfig.CoarseSamples">
            <summary>
            Coarse samples for coarse ICP aligner
            </summary>
        </member>
        <member name="P:ATMC.Common.RegistrationConfig.FineSamples">
            <summary>
            Fine samples for fine ICP aligner
            </summary>
        </member>
        <member name="P:ATMC.Common.RegistrationConfig.Model">
            <summary>
            Model cloud file = {prefix}model{suffix}.ply
            </summary>
        </member>
        <member name="P:ATMC.Common.RegistrationConfig.CadModel">
            <summary>
            Cad model mesh file = {prefix}cad{suffix}.stl
            </summary>
        </member>
        <member name="P:ATMC.Common.RegistrationConfig.Valid">
            <summary>
            Check if data is valid or not
            </summary>
        </member>
        <member name="M:ATMC.Common.RegistrationConfig.AssertFile(System.String)">
            <summary>
            Check if file exist
            </summary>
            <param name="file">file path</param>
            <exception cref="T:System.Exception">throw exception if file does not exist</exception>
        </member>
        <member name="M:ATMC.Common.RegistrationConfig.Init(System.String,System.String,System.String)">
            <summary>
            Initialize registration model
            model file name      =   [prefix]_model_[suffix].ply
            cad file name        =   [prefix]_cad_[suffix].stl
            robot pose file name =   [prefix]_scan_poses.json
            Ex.: 
               - prefix: front, rear, left, right ...
               - suffix: base, uf, cc
            </summary>
            <param name="model_dir">Model directory</param>
            <param name="prefix">prefix</param>
            <param name="suffix">suffix</param>
        </member>
        <member name="M:ATMC.Common.RegistrationConfig.Align(LotusAPI.MV.Pointcloud,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Find a match using 3D finder
            </summary>
            <param name="scene">scene cloud</param>
            <returns>Registration result</returns>
        </member>
        <member name="M:ATMC.Common.RegistrationConfig.FindAll(LotusAPI.MV.Pointcloud,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Find all result and align
            </summary>
            <param name="scene">Scene cloud</param>
            <param name="check_fitness">check fitness</param>
            <param name="check_overlap">check overlap</param>
            <param name="check_limit">check limit</param>
            <returns>list of result</returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:ATMC.Common.RegistrationConfig.ToString">
            <summary>
            Convert to string
            </summary>
        </member>
        <member name="T:ATMC.Common.CoarseToFineRegistrationConfig">
            <summary>
            Coarse to fine registration config
            </summary>
        </member>
        <member name="P:ATMC.Common.CoarseToFineRegistrationConfig.Finder">
            <summary>
            3D Pattern finder
            </summary>
        </member>
        <member name="P:ATMC.Common.CoarseToFineRegistrationConfig.FinderEnable">
            <summary>
            Enable/disable 3D pattern finder
            </summary>
        </member>
        <member name="P:ATMC.Common.CoarseToFineRegistrationConfig.Aligner">
            <summary>
            Coarse aligner
            </summary>
        </member>
        <member name="P:ATMC.Common.CoarseToFineRegistrationConfig.ShiftOffset">
            <summary>
            Shift offset
            </summary>
        </member>
        <member name="P:ATMC.Common.CoarseToFineRegistrationConfig.MaxFitness">
            <summary>
            Maximum fitness value
            </summary>
        </member>
        <member name="P:ATMC.Common.CoarseToFineRegistrationConfig.MinOverlap">
            <summary>
            Minimum overlap ratio (0~1)
            </summary>
        </member>
        <member name="P:ATMC.Common.CoarseToFineRegistrationConfig.OverlapRadius">
            <summary>
            Overlap radius (model->scene)
            </summary>
        </member>
        <member name="P:ATMC.Common.CoarseToFineRegistrationConfig.ShiftLimit">
            <summary>
            Shift limit
            </summary>
        </member>
        <member name="P:ATMC.Common.CoarseToFineRegistrationConfig.ScanPoses">
            <summary>
            Scan poses
            </summary>
        </member>
        <member name="P:ATMC.Common.CoarseToFineRegistrationConfig.Model">
            <summary>
            Model cloud file = {prefix}model{suffix}.ply
            </summary>
        </member>
        <member name="P:ATMC.Common.CoarseToFineRegistrationConfig.CadModel">
            <summary>
            Cad model mesh file = {prefix}cad{suffix}.stl
            </summary>
        </member>
        <member name="P:ATMC.Common.CoarseToFineRegistrationConfig.Valid">
            <summary>
            Check if data is valid or not
            </summary>
        </member>
        <member name="M:ATMC.Common.CoarseToFineRegistrationConfig.AssertFile(System.String)">
            <summary>
            Check if file exist
            </summary>
            <param name="file">file path</param>
            <exception cref="T:System.Exception">throw exception if file does not exist</exception>
        </member>
        <member name="M:ATMC.Common.CoarseToFineRegistrationConfig.Init(System.String,System.String,System.String)">
            <summary>
            Initialize registration model
            model file name      =   [prefix]_model_[suffix].ply
            cad file name        =   [prefix]_cad_[suffix].stl
            robot pose file name =   [prefix]_scan_poses.json
            Ex.: 
               - prefix: front, rear, left, right ...
               - suffix: base, uf, cc
            </summary>
            <param name="model_dir">Model directory</param>
            <param name="prefix">prefix</param>
            <param name="suffix">suffix</param>
        </member>
        <member name="M:ATMC.Common.CoarseToFineRegistrationConfig.Align(LotusAPI.MV.Pointcloud,LotusAPI.Math.Matrix44d,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Find a match using 3D finder
            </summary>
            <param name="scene">scene cloud</param>
            <param name="initial_matrix">initial matrix</param>
            <returns>Registration result</returns>
        </member>
        <member name="M:ATMC.Common.CoarseToFineRegistrationConfig.ToString">
            <summary>
            Convert to string
            </summary>
        </member>
        <member name="P:ATMC.Common.RegistrationResult.Fitness">
            <summary>
            Registration fitness
            </summary>
        </member>
        <member name="P:ATMC.Common.RegistrationResult.Overlap">
            <summary>
            Registration overlap
            </summary>
        </member>
        <member name="P:ATMC.Common.RegistrationResult.Matrix">
            <summary>
            Align matrix
            </summary>
        </member>
        <member name="P:ATMC.Common.RegistrationResult.TryCount">
            <summary>
            Number of tries
            </summary>
        </member>
        <member name="P:ATMC.Common.RegistrationResult.FitnessOK">
            <summary>
            Fitness value ok?
            </summary>
        </member>
        <member name="P:ATMC.Common.RegistrationResult.OverlapOK">
            <summary>
            Overlap value ok?
            </summary>
        </member>
        <member name="P:ATMC.Common.RegistrationResult.LimitOK">
            <summary>
            Limit ok?
            </summary>
        </member>
        <member name="P:ATMC.Common.RegistrationResult.OK">
            <summary>
            Is the result OK or not
            </summary>
        </member>
        <member name="P:ATMC.Common.RegistrationResult.Valid">
            <summary>
            Is the result valid?
            </summary>
        </member>
        <member name="P:ATMC.Common.RegistrationResult.Scene">
            <summary>
            Scene cloud
            </summary>
        </member>
        <member name="P:ATMC.Common.RegistrationResult.Aligned">
            <summary>
            Alinged cloud
            </summary>
        </member>
        <member name="P:ATMC.Common.RegistrationResult.SceneImgs">
            <summary>
            Scene images
            </summary>
        </member>
        <member name="M:ATMC.Common.RegistrationResult.#ctor(System.Int32)">
            <summary>
            Construct a regiastration result
            </summary>
            <param name="img_cnt">number of scan image</param>
        </member>
        <member name="M:ATMC.Common.RegistrationResult.#ctor">
            <summary>
            Construct a registration result with 1 scan image
            </summary>
        </member>
        <member name="M:ATMC.Common.RegistrationResult.Save(System.String,System.String,System.String)">
            <summary>
            Save data
            </summary>
            <param name="dir">Directory to save</param>
            <param name="prefix">File prefix</param>
        </member>
        <member name="T:ATMC.Common.ResultBase">
            <summary>
            Base class for ATM app result
            </summary>
        </member>
        <member name="P:ATMC.Common.ResultBase.Model">
            <summary>
            The model
            </summary>
        </member>
        <member name="P:ATMC.Common.ResultBase.BodyNo">
            <summary>
            Body number
            </summary>
        </member>
        <member name="P:ATMC.Common.ResultBase.SeqNo">
            <summary>
            Sequence number
            </summary>
        </member>
        <member name="P:ATMC.Common.ResultBase.Date">
            <summary>
            Date
            </summary>
        </member>
        <member name="P:ATMC.Common.ResultBase.OK">
            <summary>
            OK/NG
            </summary>
        </member>
        <member name="P:ATMC.Common.ResultBase.ScreenShot">
            <summary>
            Screenshot
            </summary>
        </member>
        <member name="M:ATMC.Common.ResultBase.SaveDB">
            <summary>
            Add a new record to DB 
            </summary>
        </member>
        <member name="F:ATMC.Common.ResultPinmapLogView.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:ATMC.Common.ResultPinmapLogView.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ATMC.Common.ResultPinmapLogView.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:ATMC.Common.ResultSignalLogView.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:ATMC.Common.ResultSignalLogView.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ATMC.Common.ResultSignalLogView.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:ATMC.Common.RobotTypeEnum">
            <summary>
            Robot type enumeration
            </summary>
        </member>
        <member name="T:ATMC.Common.RobotManager">
            <summary>
            Manage array of robots
            </summary>
        </member>
        <member name="M:ATMC.Common.RobotManager.Init(ATMC.Common.RobotTypeEnum,System.Int32,System.String)">
            <summary>
            Initialize and connect all robots
            </summary>
            <param name="robot_type">robot type</param>
            <param name="num_robots">number of robots</param>
            <param name="setting_dir">setting directory</param>
        </member>
        <member name="M:ATMC.Common.RobotManager.Init(ATMC.Common.RobotTypeEnum[],System.String)">
            <summary>
            Initialize and connect all robots
            </summary>
            <param name="robot_type">robot type</param>
            <param name="num_robots">number of robots</param>
            <param name="setting_dir">setting directory</param>
        </member>
        <member name="E:ATMC.Common.ShiftOffsetResultViewCard.TitleDoubleClickEvent">
            <summary>
            This is event will be fired when user double click the title label
            </summary>
        </member>
        <member name="E:ATMC.Common.ShiftOffsetResultViewCard.ShiftButtonClickEvent">
            <summary>
            This event will be fired when user click Shift button
            </summary>
        </member>
        <member name="E:ATMC.Common.ShiftOffsetResultViewCard.OffsetButtonClickEvent">
            <summary>
            This event will be fired when user click Offset button
            </summary>
        </member>
        <member name="M:ATMC.Common.ShiftOffsetResultViewCard.Reset">
            <summary>
            Reset the view
            </summary>
        </member>
        <member name="M:ATMC.Common.ShiftOffsetResultViewCard.SetResult(System.Boolean)">
            <summary>
            Set result label
            </summary>
            <param name="ok"></param>
        </member>
        <member name="M:ATMC.Common.ShiftOffsetResultViewCard.SetShift(LotusAPI.Math.Matrix44d,LotusAPI.Robotics.ShiftLimit)">
            <summary>
            Set shift result
            </summary>
            <param name="H">Shift matrix</param>
            <param name="shift_limit">Shift limit</param>
        </member>
        <member name="M:ATMC.Common.ShiftOffsetResultViewCard.SetFitness(System.Double,System.Boolean)">
            <summary>
            Set Fitness value
            </summary>
            <param name="fitness">Fitness value</param>
            <param name="fitness_ok">Fitness ok/ng</param>
        </member>
        <member name="M:ATMC.Common.ShiftOffsetResultViewCard.SetOverlap(System.Double,System.Boolean)">
            <summary>
            Set Overlap value
            </summary>
            <param name="overlap">Overlap value</param>
            <param name="overlap_ok">Overlap ok/ng</param>
        </member>
        <member name="M:ATMC.Common.ShiftOffsetResultViewCard.SetOffset(LotusAPI.Robotics.ShiftOffset)">
            <summary>
            Set Offset value
            </summary>
            <param name="offset">Offset value</param>
        </member>
        <member name="F:ATMC.Common.ShiftOffsetResultViewCard.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:ATMC.Common.ShiftOffsetResultViewCard.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ATMC.Common.ShiftOffsetResultViewCard.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:ATMC.Common.TabBar.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:ATMC.Common.TabBar.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ATMC.Common.TabBar.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:ATMC.Common.TCView.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:ATMC.Common.TCView.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ATMC.Common.TCView.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:ATMC.Common.TitleBar.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:ATMC.Common.TitleBar.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ATMC.Common.TitleBar.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:ATMC.Common.Utils.UpdateHwStatus(Abeo.Controls.ZeroCode.FlatStatusBar,System.Boolean,ATMC.Common.PLCManager,ATMC.Common.RobotManager,LotusAPI.HW.AbeoScanManager,ATMC.Common.CameraManager,LotusAPI.HW.LZManager)">
            <summary>
            Update hw status and display on statusbar, output PLC.DO.HW_ERR if HW_ERR signal is defined
            </summary>
            <param name="statusbar">The status bar</param>
            <param name="show_alarm">Show alarm dialog if set to true</param>
            <param name="plc_man">Plc manager</param>
            <param name="robot_man">Robot manager</param>
            <param name="scanner_man">Scanner manager</param>
            <param name="cam_man">Camera manager</param>
            <param name="lz_man">Lz manager</param>
        </member>
        <member name="M:ATMC.Common.Utils.UpdateHwStatus(Abeo.Controls.ZeroCode.FlatStatusBar,System.Boolean,System.Object[],ATMC.Common.PLCManager,ATMC.Common.RobotManager,LotusAPI.HW.AbeoScanManager,ATMC.Common.CameraManager,LotusAPI.HW.LZManager)">
            <summary>
            Update hw status and display on statusbar, output PLC.DO.HW_ERR if HW_ERR signal is defined
            </summary>
            <param name="statusbar">The status bar</param>
            <param name="show_alarm">Show alarm dialog if set to true</param>
            <param name="plc_man">Plc manager</param>
            <param name="robot_man">Robot manager</param>
            <param name="scanner_man">Scanner manager</param>
            <param name="cam_man">Camera manager</param>
            <param name="lz_man">Lz manager</param>
        </member>
        <member name="M:ATMC.Common.Utils.CreateWithNewUFCenter(LotusAPI.Robotics.HandEyeSystem,LotusAPI.Math.Point3f)">
            <summary>
            Create hand-eye with new UF center
            </summary>
            <param name="base_he"></param>
            <param name="new_uf_cen">New uf center</param>
            <returns>New hand-eye system</returns>
        </member>
        <member name="M:ATMC.Common.Utils.Scan(LotusAPI.MV.AbeoScan,LotusAPI.Robotics.IRobotController,LotusAPI.Robotics.HandEyeSystem,ATMC.Common.TargetCoordEnum)">
            <summary>
            Capture a pointcloud and convert to target coordinate, RobotPose and Coord info are embedded to the returned cloud
            </summary>
            <param name="scanner">Scanner</param>
            <param name="robot">Robot</param>
            <param name="handeye">Handeye config</param>
            <param name="coord">Target coordinate</param>
            <returns>Pointcloud</returns>
        </member>
        <member name="M:ATMC.Common.Utils.Scan(LotusAPI.MV.AbeoScan,LotusAPI.Robotics.RobotPose,LotusAPI.Robotics.HandEyeSystem,ATMC.Common.TargetCoordEnum)">
            <summary>
            Capture a pointcloud and convert to target coordinate, RobotPose and Coord info are embedded to the returned cloud
            </summary>
            <param name="scanner">Scanner</param>
            <param name="handeye">Handeye config</param>
            <param name="coord">Target coordinate</param>
            <returns>Pointcloud</returns>
        </member>
        <member name="M:ATMC.Common.Utils.GetRobotPose(LotusAPI.MV.Pointcloud)">
            <summary>
            Get robot pose info
            </summary>
            <param name="cloud">input cloud</param>
            <returns>Robot pose</returns>
        </member>
        <member name="M:ATMC.Common.VideoViewer.SetPosition(System.Double)">
            <summary>
            Set frame position
            </summary>
            <param name="pos">normalized position (0->1)</param>
        </member>
        <member name="F:ATMC.Common.VideoViewer.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:ATMC.Common.VideoViewer.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ATMC.Common.VideoViewer.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="E:ATMC.Common.ViewCard3D.TitleDoubleClickEvent">
            <summary>
            This is event will be fired when user double click the title label
            </summary>
        </member>
        <member name="E:ATMC.Common.ViewCard3D.ShiftButtonClickEvent">
            <summary>
            This event will be fired when user click Shift button
            </summary>
        </member>
        <member name="E:ATMC.Common.ViewCard3D.OffsetButtonClickEvent">
            <summary>
            This event will be fired when user click Offset button
            </summary>
        </member>
        <member name="M:ATMC.Common.ViewCard3D.Init(System.String)">
            <summary>
            Init the registry key name for Pointcloud view
            </summary>
            <param name="key">Registry key name</param>
        </member>
        <member name="M:ATMC.Common.ViewCard3D.Reset">
            <summary>
            Reset the view
            </summary>
        </member>
        <member name="M:ATMC.Common.ViewCard3D.SetResult(System.Boolean)">
            <summary>
            Set result label
            </summary>
            <param name="ok"></param>
        </member>
        <member name="M:ATMC.Common.ViewCard3D.SetShift(LotusAPI.Math.Matrix44d,LotusAPI.Robotics.ShiftLimit)">
            <summary>
            Set shift result
            </summary>
            <param name="H">Shift matrix</param>
            <param name="shift_limit">Shift limit</param>
        </member>
        <member name="M:ATMC.Common.ViewCard3D.SetFitness(System.Double,System.Boolean)">
            <summary>
            Set Fitness value
            </summary>
            <param name="fitness">Fitness value</param>
            <param name="fitness_ok">Fitness ok/ng</param>
        </member>
        <member name="M:ATMC.Common.ViewCard3D.SetOverlap(System.Double,System.Boolean)">
            <summary>
            Set Overlap value
            </summary>
            <param name="overlap">Overlap value</param>
            <param name="overlap_ok">Overlap ok/ng</param>
        </member>
        <member name="M:ATMC.Common.ViewCard3D.SetOffset(LotusAPI.Robotics.ShiftOffset)">
            <summary>
            Set Offset value
            </summary>
            <param name="offset">Offset value</param>
        </member>
        <member name="F:ATMC.Common.ViewCard3D.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:ATMC.Common.ViewCard3D.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ATMC.Common.ViewCard3D.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:ATMC.Common.BiPieChart.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:ATMC.Common.BiPieChart.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:ATMC.Common.BiStackCounterChart.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:ATMC.Common.BiStackCounterChart.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ATMC.Common.BiStackCounterChart.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="E:ATMC.Common.ImageViewCard.TitleDoubleClickEvent">
            <summary>
            This is event will be fired when user double click the title label
            </summary>
        </member>
        <member name="F:ATMC.Common.ImageViewCard.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:ATMC.Common.ImageViewCard.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ATMC.Common.ImageViewCard.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:ATMC.Common.PLCManager.PCRUNToggleInterval">
            <summary>
            PCRUN toggle interval (ms)
            </summary>
        </member>
        <member name="P:ATMC.Common.PLCManager.EnablePCRUN">
            <summary>
            Enable/disable PCRUN togle
            </summary>
        </member>
        <member name="P:ATMC.Common.PLCManager.PCRUNMethod">
            <summary>
            PCRUN method
            </summary>
        </member>
        <member name="P:ATMC.Common.PLCManager.Plc">
            <summary>
            PLC device
            </summary>
        </member>
        <member name="P:ATMC.Common.PLCManager.PlcConnected">
            <summary>
            Return true if plc is connected
            </summary>
        </member>
        <member name="M:ATMC.Common.PLCManager.AssertPlc">
            <summary>
            Check if PLC is not null
            </summary>
        </member>
        <member name="P:ATMC.Common.PLCManager.IsConnected">
            <summary>
            Return true if PLC is connected
            </summary>
        </member>
        <member name="M:ATMC.Common.PLCManager.AssertPlcConnected">
            <summary>
            Check if PLC is connected
            </summary>
        </member>
        <member name="M:ATMC.Common.PLCManager.#ctor(ATMC.Common.PlcTypeEnum,System.String)">
            <summary>
            Construct PLC manager
            </summary>
            <param name="type">Plc type</param>
            <param name="setting_file">setting file</param>
        </member>
        <member name="M:ATMC.Common.PLCManager.Init(ATMC.Common.PlcTypeEnum,System.String)">
            <summary>
            Initialize plc
            </summary>
            <param name="type"></param>
            <param name="setting_file"></param>
        </member>
        <member name="M:ATMC.Common.PLCManager.Reconnect">
            <summary>
            Reconnect to PLC device (disconnect if currently connected, then connect again)
            Start PCRUN toggle thread if not already started
            </summary>
        </member>
        <member name="M:ATMC.Common.PLCManager.Connect">
            <summary>
            Connect to PLC device, do nothing if PLC is already connected
            Start PCRUN toggle thread if not already started
            </summary>
        </member>
        <member name="M:ATMC.Common.PLCManager.Disconnect">
            <summary>
            Disconnect PLC device, stop PLCRUN toggle thread
            </summary>
        </member>
        <member name="M:ATMC.Common.PLCManager.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:ATMC.Common.PLCManager.StartPCRUNThread">
            <summary>
            Start PCRUN thread
            </summary>
        </member>
        <member name="M:ATMC.Common.PLCManager.GetMemoryBlock(System.String)">
            <summary>
            Get memory block, throw if failed to find block
            </summary>
            <param name="name"></param>
            <returns>Memory block</returns>
        </member>
        <member name="M:ATMC.Common.PLCManager.GetMemoryBlock(System.Enum)">
            <summary>
            Get memory block, throw if failed to find block
            </summary>
            <param name="block_enum">Block name</param>
            <returns>Memory block</returns>
        </member>
        <member name="M:ATMC.Common.PLCManager.GetDOPin(System.String)">
            <summary>
            Get DO pin, throw if failed to find pin
            </summary>
            <param name="name">Pin name</param>
            <returns>Pin</returns>
        </member>
        <member name="M:ATMC.Common.PLCManager.GetDOPin(System.Enum)">
            <summary>
            Get DO pin, throw if failed to find pin
            </summary>
            <param name="name">Pin name</param>
            <returns>Pin</returns>
        </member>
        <member name="M:ATMC.Common.PLCManager.GetDIPin(System.String)">
            <summary>
            Get DI pin, throw if failed to find pin
            </summary>
            <param name="name">Pin name</param>
            <returns>Pin</returns>
        </member>
        <member name="M:ATMC.Common.PLCManager.GetDIPin(System.Enum)">
            <summary>
            Get DI pin, throw if failed to find pin
            </summary>
            <param name="name">Pin name</param>
            <returns>Pin</returns>
        </member>
        <member name="M:ATMC.Common.PLCManager.GetDOBit(System.String)">
            <summary>
            Get DO bit value, throw if failed to find pin
            </summary>
            <param name="name">Pin name</param>
            <returns>bit value</returns>
        </member>
        <member name="M:ATMC.Common.PLCManager.GetDOBit(System.Enum)">
            <summary>
            Get DO bit value, throw if failed to find pin
            </summary>
            <param name="name">Pin name</param>
            <returns>bit value</returns>
        </member>
        <member name="M:ATMC.Common.PLCManager.WriteDOBit(System.String,System.Boolean)">
            <summary>
            Write DO bit value, log error failed to find pin
            </summary>
            <param name="name">Pin name</param>
            <param name="value">Pin value</param>
        </member>
        <member name="M:ATMC.Common.PLCManager.WriteDOBits(System.Collections.Generic.ICollection{System.ValueTuple{System.String,System.Boolean}})">
            <summary>
            Write DO bit value, log error if failed to find pin
            </summary>
            <param name="bits"></param>
        </member>
        <member name="M:ATMC.Common.PLCManager.PulseDOBit(System.String,System.Int32)">
            <summary>
            Pulse DO bit, log error if failed to find pin
            </summary>
            <param name="name"></param>
            <param name="pulse_width_ms"></param>
        </member>
        <member name="M:ATMC.Common.PLCManager.PulseDOBit(System.Enum,System.Int32)">
            <summary>
            Pulse DO bit, log error if failed to find pin
            </summary>
            <param name="name"></param>
            <param name="pulse_width_ms"></param>
        </member>
        <member name="M:ATMC.Common.PLCManager.WriteDOBit(System.Enum,System.Boolean)">
            <summary>
            Write DO bit value, throw if failed to find pin
            </summary>
            <param name="name">Pin name</param>
            <param name="value">Pin value</param>
        </member>
        <member name="M:ATMC.Common.PLCManager.WriteDOBits(System.Collections.Generic.ICollection{System.ValueTuple{System.Enum,System.Boolean}})">
            <summary>
            Write multiple DO bits, log if failed to find pin
            </summary>
            <param name="bits"></param>
        </member>
        <member name="M:ATMC.Common.PLCManager.ToggleDOBit(System.String)">
            <summary>
            Toggle DO bit, throw if failed to find pin
            </summary>
            <param name="pin_name"></param>
        </member>
        <member name="M:ATMC.Common.PLCManager.ToggleDOBit(System.Enum)">
            <summary>
            Toggle DO bit, throw if failed to find pin
            </summary>
            <param name="pin_name"></param>
        </member>
        <member name="M:ATMC.Common.PLCManager.ClearDO">
            <summary>
            Clear all DO pins
            </summary>
        </member>
        <member name="M:ATMC.Common.PLCManager.ReadBlockAscii(System.String)">
            <summary>
            Read memory block ascii content, throw if failed to find block
            </summary>
            <param name="block_name">Block name</param>
            <returns>Ascii string</returns>
        </member>
        <member name="M:ATMC.Common.PLCManager.ReadBlockAscii(System.Enum)">
            <summary>
            Read memory block ascii content, throw if failed to find block
            </summary>
            <param name="block_name">Block name</param>
            <returns>Ascii string</returns>
        </member>
        <member name="M:ATMC.Common.PLCManager.ReadBlockUserString(System.String)">
            <summary>
            Read memory block user string contents, throw if block not found
            </summary>
            <param name="block_name">Block name</param>
            <returns>User string</returns>
        </member>
        <member name="M:ATMC.Common.PLCManager.ReadBlockUserString(System.Enum)">
            <summary>
            Read memory block user string contents, throw if block not found
            </summary>
            <param name="block_name">Block name</param>
            <returns>User string</returns>
        </member>
        <member name="M:ATMC.Common.PLCManager.ReadBlockInt16(System.String,System.Int32)">
            <summary>
            Read memory block int16 content, throw if failed to find block
            </summary>
            <param name="block_name">Block name</param>
            <returns>int16 value</returns>
        </member>
        <member name="M:ATMC.Common.PLCManager.ReadBlockInt16(System.Enum,System.Int32)">
            <summary>
            Read memory block int16 content, throw if failed to find block
            </summary>
            <param name="block_name">Block name</param>
            <returns>int16 value</returns>
        </member>
        <member name="M:ATMC.Common.PLCManager.ReadBlockUInt16(System.String,System.Int32)">
            <summary>
            Read memory block uint16 content, throw if failed to find block
            </summary>
            <param name="block_name">Block name</param>
            <returns>uint16 value</returns>
        </member>
        <member name="M:ATMC.Common.PLCManager.ReadBlockUInt16(System.Enum,System.Int32)">
            <summary>
            Read memory block uint16 content, throw if failed to find block
            </summary>
            <param name="block_name">Block name</param>
            <returns>uint16 value</returns>
        </member>
        <member name="M:ATMC.Common.PLCManager.ReadBlockInt32(System.String,System.Int32)">
            <summary>
            Read memory block int32 content, throw if failed to find block
            </summary>
            <param name="block_name">Block name</param>
            <returns>int32 value</returns>
        </member>
        <member name="M:ATMC.Common.PLCManager.ReadBlockInt32(System.Enum,System.Int32)">
            <summary>
            Read memory block int32 content, throw if failed to find block
            </summary>
            <param name="block_name">Block name</param>
            <returns>int32 value</returns>
        </member>
        <member name="M:ATMC.Common.PLCManager.ReadBlockUInt32(System.String,System.Int32)">
            <summary>
            Read memory block uint32 content, throw if failed to find block
            </summary>
            <param name="block_name">Block name</param>
            <returns>uint32 value</returns>
        </member>
        <member name="M:ATMC.Common.PLCManager.ReadBlockUInt32(System.Enum,System.Int32)">
            <summary>
            Read memory block uint32 content, throw if failed to find block
            </summary>
            <param name="block_name">Block name</param>
            <returns>uint32 value</returns>
        </member>
        <member name="M:ATMC.Common.PLCManager.ReadBlock(System.String)">
            <summary>
            Read byte array from block, throw if failed to find block
            </summary>
            <param name="block_name">Block name</param>
            <returns>Byte array</returns>
        </member>
        <member name="M:ATMC.Common.PLCManager.ReadBlock(System.Enum)">
            <summary>
            Read byte array from block, throw if failed to find block
            </summary>
            <param name="block_name">Block name</param>
            <returns>Byte array</returns>
        </member>
        <member name="M:ATMC.Common.PLCManager.WriteBlock(System.String,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write byte array to block, throw if failed to find block
            </summary>
            <param name="block_name">Block name</param>
            <param name="data">Byte array data</param>
        </member>
        <member name="M:ATMC.Common.PLCManager.WriteBlock(System.Enum,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write byte array to block, throw if failed to find block
            </summary>
            <param name="block_name">Block name</param>
            <param name="data">Byte array data</param>
        </member>
        <member name="M:ATMC.Common.PLCManager.WriteBlockAscii(System.String,System.String,System.Int32)">
            <summary>
            Write ascii string to block, throw if failed to find block
            </summary>
            <param name="block_name">Block name</param>
            <param name="data">string data</param>
        </member>
        <member name="M:ATMC.Common.PLCManager.WriteBlockAscii(System.Enum,System.String,System.Int32)">
            <summary>
            Write ascii string to block, throw if failed to find block
            </summary>
            <param name="block_name">Block name</param>
            <param name="data">string data</param>
        </member>
        <member name="M:ATMC.Common.PLCManager.WriteBlockInt16(System.String,System.Int16,System.Int32)">
            <summary>
            Write int16 value to block, throw if failed to find block
            </summary>
            <param name="block_name">Block name</param>
            <param name="data">int16 data</param>
        </member>
        <member name="M:ATMC.Common.PLCManager.WriteBlockInt16(System.Enum,System.Int16,System.Int32)">
            <summary>
            Write int16 value to block, throw if failed to find block
            </summary>
            <param name="block_name">Block name</param>
            <param name="data">int16 data</param>
        </member>
        <member name="M:ATMC.Common.PLCManager.WriteBlockUInt16(System.String,System.UInt16,System.Int32)">
            <summary>
            Write uint16 value to block, throw if failed to find block
            </summary>
            <param name="block_name">Block name</param>
            <param name="data">uint16 data</param>
        </member>
        <member name="M:ATMC.Common.PLCManager.WriteBlockUInt16(System.Enum,System.UInt16,System.Int32)">
            <summary>
            Write uint16 value to block, throw if failed to find block
            </summary>
            <param name="block_name">Block name</param>
            <param name="data">uint16 data</param>
        </member>
        <member name="M:ATMC.Common.PLCManager.WriteBlockInt32(System.String,System.Int32,System.Int32)">
            <summary>
            Write int32 value to block, throw if failed to find block
            </summary>
            <param name="block_name">Block name</param>
            <param name="data">int32 data</param>
        </member>
        <member name="M:ATMC.Common.PLCManager.WriteBlockInt32(System.Enum,System.Int32,System.Int32)">
            <summary>
            Write int32 value to block, throw if failed to find block
            </summary>
            <param name="block_name">Block name</param>
            <param name="data">int32 data</param>
        </member>
        <member name="M:ATMC.Common.PLCManager.WriteBlockUInt32(System.String,System.UInt32,System.Int32)">
            <summary>
            Write uint32 value to block, throw if failed to find block
            </summary>
            <param name="block_name">Block name</param>
            <param name="data">uint32 data</param>
        </member>
        <member name="M:ATMC.Common.PLCManager.WriteBlockUInt32(System.Enum,System.UInt32,System.Int32)">
            <summary>
            Write uint32 value to block, throw if failed to find block
            </summary>
            <param name="block_name">Block name</param>
            <param name="data">uint32 data</param>
        </member>
        <member name="M:ATMC.Common.PLCManager.GetDIBit(System.String)">
            <summary>
            Get DI bit
            </summary>
            <param name="name">bit name</param>
            <returns>bit value</returns>
        </member>
        <member name="M:ATMC.Common.PLCManager.GetDIBit(System.Enum)">
            <summary>
            Get DI bit
            </summary>
            <param name="name">bit name</param>
            <returns>bit value</returns>
        </member>
        <member name="T:ATMC.Common.ResultCounterView">
            <summary>
            Result counter control
            </summary>
        </member>
        <member name="M:ATMC.Common.ResultCounterView.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="F:ATMC.Common.ResultCounterView.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:ATMC.Common.ResultCounterView.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ATMC.Common.ResultCounterView.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="E:ATMC.Common.ViewCardResultView.TitleDoubleClickEvent">
            <summary>
            This is event will be fired when user double click the title label
            </summary>
        </member>
        <member name="F:ATMC.Common.ViewCardResultView.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:ATMC.Common.ViewCardResultView.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ATMC.Common.ViewCardResultView.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="E:ATMC.Common.ViewCardSceneViewer.TitleDoubleClickEvent">
            <summary>
            This is event will be fired when user double click the title label
            </summary>
        </member>
        <member name="F:ATMC.Common.ViewCardSceneViewer.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:ATMC.Common.ViewCardSceneViewer.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ATMC.Common.ViewCardSceneViewer.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="E:ATMC.Common.ViewCard3DSimple.TitleDoubleClickEvent">
            <summary>
            This is event will be fired when user double click the title label
            </summary>
        </member>
        <member name="F:ATMC.Common.ViewCard3DSimple.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:ATMC.Common.ViewCard3DSimple.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ATMC.Common.ViewCard3DSimple.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="E:ATMC.Common.ViewCardLZ.TitleDoubleClickEvent">
            <summary>
            This is event will be fired when user double click the title label
            </summary>
        </member>
        <member name="F:ATMC.Common.ViewCardLZ.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:ATMC.Common.ViewCardLZ.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ATMC.Common.ViewCardLZ.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="E:ATMC.Common.Vision3DResultView.ShiftButtonClickEvent">
            <summary>
            This event will be fired when user click Shift button
            </summary>
        </member>
        <member name="E:ATMC.Common.Vision3DResultView.OffsetButtonClickEvent">
            <summary>
            This event will be fired when user click Offset button
            </summary>
        </member>
        <member name="M:ATMC.Common.Vision3DResultView.Reset">
            <summary>
            Reset the view
            </summary>
        </member>
        <member name="M:ATMC.Common.Vision3DResultView.SetResult(System.Boolean)">
            <summary>
            Set result label
            </summary>
            <param name="ok"></param>
        </member>
        <member name="M:ATMC.Common.Vision3DResultView.SetShift(LotusAPI.Math.Matrix44d,LotusAPI.Robotics.ShiftLimit)">
            <summary>
            Set shift result
            </summary>
            <param name="H">Shift matrix</param>
            <param name="shift_limit">Shift limit</param>
        </member>
        <member name="M:ATMC.Common.Vision3DResultView.SetFitness(System.Double,System.Boolean)">
            <summary>
            Set Fitness value
            </summary>
            <param name="fitness">Fitness value</param>
            <param name="fitness_ok">Fitness ok/ng</param>
        </member>
        <member name="M:ATMC.Common.Vision3DResultView.SetOverlap(System.Double,System.Boolean)">
            <summary>
            Set Overlap value
            </summary>
            <param name="overlap">Overlap value</param>
            <param name="overlap_ok">Overlap ok/ng</param>
        </member>
        <member name="M:ATMC.Common.Vision3DResultView.SetOffset(LotusAPI.Robotics.ShiftOffset)">
            <summary>
            Set Offset value
            </summary>
            <param name="offset">Offset value</param>
        </member>
        <member name="F:ATMC.Common.Vision3DResultView.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:ATMC.Common.Vision3DResultView.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ATMC.Common.Vision3DResultView.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:ATMC.Common.WorkCell.DockContentFlowPanel.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:ATMC.Common.WorkCell.DockContentFlowPanel.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ATMC.Common.WorkCell.DockContentFlowPanel.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:ATMC.Common.WorkCell.DockContentModelConfig_`1.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:ATMC.Common.WorkCell.DockContentModelConfig_`1.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ATMC.Common.WorkCell.DockContentModelConfig_`1.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:ATMC.Common.WorkCell.DockContentResultView.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:ATMC.Common.WorkCell.DockContentResultView.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ATMC.Common.WorkCell.DockContentResultView.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:ATMC.Common.WorkCell.DockContent_`1.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:ATMC.Common.WorkCell.DockContent_`1.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ATMC.Common.WorkCell.DockContent_`1.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:ATMC.Common.WorkCell.ScannerServer.Profile">
            <summary>
            The profile name used for the scanner configuration.
            </summary>
        </member>
        <member name="P:ATMC.Common.WorkCell.ScannerServer.ROI">
            <summary>
            The region of interest (ROI) for the scanner.
            </summary>
        </member>
        <member name="P:ATMC.Common.WorkCell.ScannerServer.Scanner">
            <summary>
            The scanner object used for scanning operations.
            </summary>
        </member>
        <member name="F:ATMC.Common.WorkCell.ScannerServer._encodeBuffer">
            <summary>
            Internal buffer used for encoding scan data.
            </summary>
        </member>
        <member name="P:ATMC.Common.WorkCell.ScannerServer.Publisher">
            <summary>
            The publisher used to publish scanner status updates.
            </summary>
        </member>
        <member name="P:ATMC.Common.WorkCell.ScannerServer.IsConnected">
            <summary>
            Indicates whether the scanner is connected.
            </summary>
        </member>
        <member name="M:ATMC.Common.WorkCell.ScannerServer.Init">
            <summary>
            Initializes the scanner server by stopping any existing operations, creating a new scanner instance, and setting the status to Initialized.
            </summary>
            <example>
            var server = new ScannerServer();
            server.Init();
            </example>
        </member>
        <member name="M:ATMC.Common.WorkCell.ScannerServer.Start">
            <summary>
            Starts the scanner server, connects the scanner, sets the ROI, and initializes the publisher and server for handling requests.
            </summary>
            <example>
            var server = new ScannerServer();
            server.Init();
            server.Start();
            </example>
        </member>
        <member name="M:ATMC.Common.WorkCell.ScannerServer.Stop">
            <summary>
            Stops the scanner server, disconnects the scanner, and disposes of the publisher and server.
            </summary>
            <example>
            var server = new ScannerServer();
            server.Stop();
            </example>
        </member>
        <member name="M:ATMC.Common.WorkCell.ScannerServer.Read(LotusAPI.Json)">
            <summary>
            Reads the configuration from a JSON node and initializes the scanner server.
            </summary>
            <param name="node">The JSON node containing the configuration.</param>
            <example>
            var server = new ScannerServer();
            server.Read(jsonNode);
            </example>
        </member>
        <member name="M:ATMC.Common.WorkCell.ScannerServer.Write(LotusAPI.Json)">
            <summary>
            Writes the current configuration to a JSON node.
            </summary>
            <param name="node">The JSON node to write the configuration to.</param>
            <example>
            var server = new ScannerServer();
            server.Write(jsonNode);
            </example>
        </member>
        <member name="M:ATMC.Common.WorkCell.ScannerServer.Dispose(System.Boolean)">
            <summary>
            Disposes of the scanner server, stopping and disposing of the publisher if necessary.
            </summary>
            <param name="disposing">Indicates whether the method is called from Dispose().</param>
            <example>
            var server = new ScannerServer();
            server.Dispose();
            </example>
        </member>
        <member name="M:ATMC.Common.WorkCell.WorkCell.SetupView(LotusAPI.Controls.SceneViewer)">
            <summary>
            Setup 3d scene view
            </summary>
        </member>
        <member name="M:ATMC.Common.WorkCell.WorkCell.GetNodeNames">
            <summary>
            Get all hw node names
            </summary>
            <returns></returns>
        </member>
        <member name="M:ATMC.Common.WorkCell.WorkCell.GetNode(System.String)">
            <summary>
            Get node by name
            </summary>
        </member>
    </members>
</doc>
